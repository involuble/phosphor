/* automatically generated by rust-bindgen */

pub const RTC_VERSION_MAJOR: u32 = 3;
pub const RTC_VERSION_MINOR: u32 = 12;
pub const RTC_VERSION_PATCH: u32 = 1;
pub const RTC_VERSION: u32 = 31201;
pub const RTC_VERSION_STRING: &'static [u8; 7usize] = b"3.12.1\0";
pub const RTC_MAX_INSTANCE_LEVEL_COUNT: u32 = 1;
pub const RTC_MIN_WIDTH: u32 = 0;
pub const RTC_MAX_TIME_STEP_COUNT: u32 = 129;
pub const RTC_FORMAT_UNDEFINED: RTCFormat = 0;
pub const RTC_FORMAT_UCHAR: RTCFormat = 4097;
pub const RTC_FORMAT_UCHAR2: RTCFormat = 4098;
pub const RTC_FORMAT_UCHAR3: RTCFormat = 4099;
pub const RTC_FORMAT_UCHAR4: RTCFormat = 4100;
pub const RTC_FORMAT_CHAR: RTCFormat = 8193;
pub const RTC_FORMAT_CHAR2: RTCFormat = 8194;
pub const RTC_FORMAT_CHAR3: RTCFormat = 8195;
pub const RTC_FORMAT_CHAR4: RTCFormat = 8196;
pub const RTC_FORMAT_USHORT: RTCFormat = 12289;
pub const RTC_FORMAT_USHORT2: RTCFormat = 12290;
pub const RTC_FORMAT_USHORT3: RTCFormat = 12291;
pub const RTC_FORMAT_USHORT4: RTCFormat = 12292;
pub const RTC_FORMAT_SHORT: RTCFormat = 16385;
pub const RTC_FORMAT_SHORT2: RTCFormat = 16386;
pub const RTC_FORMAT_SHORT3: RTCFormat = 16387;
pub const RTC_FORMAT_SHORT4: RTCFormat = 16388;
pub const RTC_FORMAT_UINT: RTCFormat = 20481;
pub const RTC_FORMAT_UINT2: RTCFormat = 20482;
pub const RTC_FORMAT_UINT3: RTCFormat = 20483;
pub const RTC_FORMAT_UINT4: RTCFormat = 20484;
pub const RTC_FORMAT_INT: RTCFormat = 24577;
pub const RTC_FORMAT_INT2: RTCFormat = 24578;
pub const RTC_FORMAT_INT3: RTCFormat = 24579;
pub const RTC_FORMAT_INT4: RTCFormat = 24580;
pub const RTC_FORMAT_ULLONG: RTCFormat = 28673;
pub const RTC_FORMAT_ULLONG2: RTCFormat = 28674;
pub const RTC_FORMAT_ULLONG3: RTCFormat = 28675;
pub const RTC_FORMAT_ULLONG4: RTCFormat = 28676;
pub const RTC_FORMAT_LLONG: RTCFormat = 32769;
pub const RTC_FORMAT_LLONG2: RTCFormat = 32770;
pub const RTC_FORMAT_LLONG3: RTCFormat = 32771;
pub const RTC_FORMAT_LLONG4: RTCFormat = 32772;
pub const RTC_FORMAT_FLOAT: RTCFormat = 36865;
pub const RTC_FORMAT_FLOAT2: RTCFormat = 36866;
pub const RTC_FORMAT_FLOAT3: RTCFormat = 36867;
pub const RTC_FORMAT_FLOAT4: RTCFormat = 36868;
pub const RTC_FORMAT_FLOAT5: RTCFormat = 36869;
pub const RTC_FORMAT_FLOAT6: RTCFormat = 36870;
pub const RTC_FORMAT_FLOAT7: RTCFormat = 36871;
pub const RTC_FORMAT_FLOAT8: RTCFormat = 36872;
pub const RTC_FORMAT_FLOAT9: RTCFormat = 36873;
pub const RTC_FORMAT_FLOAT10: RTCFormat = 36874;
pub const RTC_FORMAT_FLOAT11: RTCFormat = 36875;
pub const RTC_FORMAT_FLOAT12: RTCFormat = 36876;
pub const RTC_FORMAT_FLOAT13: RTCFormat = 36877;
pub const RTC_FORMAT_FLOAT14: RTCFormat = 36878;
pub const RTC_FORMAT_FLOAT15: RTCFormat = 36879;
pub const RTC_FORMAT_FLOAT16: RTCFormat = 36880;
pub const RTC_FORMAT_FLOAT2X2_ROW_MAJOR: RTCFormat = 37154;
pub const RTC_FORMAT_FLOAT2X3_ROW_MAJOR: RTCFormat = 37155;
pub const RTC_FORMAT_FLOAT2X4_ROW_MAJOR: RTCFormat = 37156;
pub const RTC_FORMAT_FLOAT3X2_ROW_MAJOR: RTCFormat = 37170;
pub const RTC_FORMAT_FLOAT3X3_ROW_MAJOR: RTCFormat = 37171;
pub const RTC_FORMAT_FLOAT3X4_ROW_MAJOR: RTCFormat = 37172;
pub const RTC_FORMAT_FLOAT4X2_ROW_MAJOR: RTCFormat = 37186;
pub const RTC_FORMAT_FLOAT4X3_ROW_MAJOR: RTCFormat = 37187;
pub const RTC_FORMAT_FLOAT4X4_ROW_MAJOR: RTCFormat = 37188;
pub const RTC_FORMAT_FLOAT2X2_COLUMN_MAJOR: RTCFormat = 37410;
pub const RTC_FORMAT_FLOAT2X3_COLUMN_MAJOR: RTCFormat = 37411;
pub const RTC_FORMAT_FLOAT2X4_COLUMN_MAJOR: RTCFormat = 37412;
pub const RTC_FORMAT_FLOAT3X2_COLUMN_MAJOR: RTCFormat = 37426;
pub const RTC_FORMAT_FLOAT3X3_COLUMN_MAJOR: RTCFormat = 37427;
pub const RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR: RTCFormat = 37428;
pub const RTC_FORMAT_FLOAT4X2_COLUMN_MAJOR: RTCFormat = 37442;
pub const RTC_FORMAT_FLOAT4X3_COLUMN_MAJOR: RTCFormat = 37443;
pub const RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR: RTCFormat = 37444;
pub const RTC_FORMAT_GRID: RTCFormat = 40961;
pub type RTCFormat = i32;
pub const RTC_BUILD_QUALITY_LOW: RTCBuildQuality = 0;
pub const RTC_BUILD_QUALITY_MEDIUM: RTCBuildQuality = 1;
pub const RTC_BUILD_QUALITY_HIGH: RTCBuildQuality = 2;
pub const RTC_BUILD_QUALITY_REFIT: RTCBuildQuality = 3;
pub type RTCBuildQuality = i32;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCBounds {
    pub lower_x: f32,
    pub lower_y: f32,
    pub lower_z: f32,
    pub align0: f32,
    pub upper_x: f32,
    pub upper_y: f32,
    pub upper_z: f32,
    pub align1: f32,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCLinearBounds {
    pub bounds0: RTCBounds,
    pub bounds1: RTCBounds,
}
pub const RTC_INTERSECT_CONTEXT_FLAG_NONE: RTCIntersectContextFlags = 0;
pub const RTC_INTERSECT_CONTEXT_FLAG_INCOHERENT: RTCIntersectContextFlags = 0;
pub const RTC_INTERSECT_CONTEXT_FLAG_COHERENT: RTCIntersectContextFlags = 1;
pub type RTCIntersectContextFlags = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCFilterFunctionNArguments {
    pub valid: *mut ::std::os::raw::c_int,
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub context: *mut RTCIntersectContext,
    pub ray: *mut RTCRayN,
    pub hit: *mut RTCHitN,
    pub N: ::std::os::raw::c_uint,
}
pub type RTCFilterFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCFilterFunctionNArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCIntersectContext {
    pub flags: RTCIntersectContextFlags,
    pub filter: RTCFilterFunctionN,
    pub instID: [::std::os::raw::c_uint; 1usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub time: f32,
    pub radius: f32,
    pub __bindgen_padding_0: [u32; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery4 {
    pub x: [f32; 4usize],
    pub y: [f32; 4usize],
    pub z: [f32; 4usize],
    pub time: [f32; 4usize],
    pub radius: [f32; 4usize],
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery8 {
    pub x: [f32; 8usize],
    pub y: [f32; 8usize],
    pub z: [f32; 8usize],
    pub time: [f32; 8usize],
    pub radius: [f32; 8usize],
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct RTCPointQuery16 {
    pub x: [f32; 16usize],
    pub y: [f32; 16usize],
    pub z: [f32; 16usize],
    pub time: [f32; 16usize],
    pub radius: [f32; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQueryN {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQueryContext {
    pub world2inst: [[f32; 16usize]; 1usize],
    pub inst2world: [[f32; 16usize]; 1usize],
    pub instID: [::std::os::raw::c_uint; 1usize],
    pub instStackSize: ::std::os::raw::c_uint,
    pub __bindgen_padding_0: u64,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQueryFunctionArguments {
    pub query: *mut RTCPointQuery,
    pub userPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
    pub context: *mut RTCPointQueryContext,
    pub similarityScale: f32,
    pub __bindgen_padding_0: [u32; 3usize],
}
pub type RTCPointQueryFunction =
    ::std::option::Option<unsafe extern "C" fn(args: *mut RTCPointQueryFunctionArguments) -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCDeviceTy {
    _unused: [u8; 0],
}
pub type RTCDevice = *mut RTCDeviceTy;
extern "C" {
    pub fn rtcNewDevice(config: *const ::std::os::raw::c_char) -> RTCDevice;
}
extern "C" {
    pub fn rtcRetainDevice(device: RTCDevice);
}
extern "C" {
    pub fn rtcReleaseDevice(device: RTCDevice);
}
pub const RTC_DEVICE_PROPERTY_VERSION: RTCDeviceProperty = 0;
pub const RTC_DEVICE_PROPERTY_VERSION_MAJOR: RTCDeviceProperty = 1;
pub const RTC_DEVICE_PROPERTY_VERSION_MINOR: RTCDeviceProperty = 2;
pub const RTC_DEVICE_PROPERTY_VERSION_PATCH: RTCDeviceProperty = 3;
pub const RTC_DEVICE_PROPERTY_NATIVE_RAY4_SUPPORTED: RTCDeviceProperty = 32;
pub const RTC_DEVICE_PROPERTY_NATIVE_RAY8_SUPPORTED: RTCDeviceProperty = 33;
pub const RTC_DEVICE_PROPERTY_NATIVE_RAY16_SUPPORTED: RTCDeviceProperty = 34;
pub const RTC_DEVICE_PROPERTY_RAY_STREAM_SUPPORTED: RTCDeviceProperty = 35;
pub const RTC_DEVICE_PROPERTY_BACKFACE_CULLING_CURVES_ENABLED: RTCDeviceProperty = 63;
pub const RTC_DEVICE_PROPERTY_RAY_MASK_SUPPORTED: RTCDeviceProperty = 64;
pub const RTC_DEVICE_PROPERTY_BACKFACE_CULLING_ENABLED: RTCDeviceProperty = 65;
pub const RTC_DEVICE_PROPERTY_FILTER_FUNCTION_SUPPORTED: RTCDeviceProperty = 66;
pub const RTC_DEVICE_PROPERTY_IGNORE_INVALID_RAYS_ENABLED: RTCDeviceProperty = 67;
pub const RTC_DEVICE_PROPERTY_COMPACT_POLYS_ENABLED: RTCDeviceProperty = 68;
pub const RTC_DEVICE_PROPERTY_TRIANGLE_GEOMETRY_SUPPORTED: RTCDeviceProperty = 96;
pub const RTC_DEVICE_PROPERTY_QUAD_GEOMETRY_SUPPORTED: RTCDeviceProperty = 97;
pub const RTC_DEVICE_PROPERTY_SUBDIVISION_GEOMETRY_SUPPORTED: RTCDeviceProperty = 98;
pub const RTC_DEVICE_PROPERTY_CURVE_GEOMETRY_SUPPORTED: RTCDeviceProperty = 99;
pub const RTC_DEVICE_PROPERTY_USER_GEOMETRY_SUPPORTED: RTCDeviceProperty = 100;
pub const RTC_DEVICE_PROPERTY_POINT_GEOMETRY_SUPPORTED: RTCDeviceProperty = 101;
pub const RTC_DEVICE_PROPERTY_TASKING_SYSTEM: RTCDeviceProperty = 128;
pub const RTC_DEVICE_PROPERTY_JOIN_COMMIT_SUPPORTED: RTCDeviceProperty = 129;
pub const RTC_DEVICE_PROPERTY_PARALLEL_COMMIT_SUPPORTED: RTCDeviceProperty = 130;
pub type RTCDeviceProperty = i32;
extern "C" {
    pub fn rtcGetDeviceProperty(device: RTCDevice, prop: RTCDeviceProperty) -> isize;
}
extern "C" {
    pub fn rtcSetDeviceProperty(device: RTCDevice, prop: RTCDeviceProperty, value: isize);
}
pub const RTC_ERROR_NONE: RTCError = 0;
pub const RTC_ERROR_UNKNOWN: RTCError = 1;
pub const RTC_ERROR_INVALID_ARGUMENT: RTCError = 2;
pub const RTC_ERROR_INVALID_OPERATION: RTCError = 3;
pub const RTC_ERROR_OUT_OF_MEMORY: RTCError = 4;
pub const RTC_ERROR_UNSUPPORTED_CPU: RTCError = 5;
pub const RTC_ERROR_CANCELLED: RTCError = 6;
pub type RTCError = i32;
extern "C" {
    pub fn rtcGetDeviceError(device: RTCDevice) -> RTCError;
}
pub type RTCErrorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        userPtr: *mut ::std::os::raw::c_void,
        code: RTCError,
        str: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn rtcSetDeviceErrorFunction(
        device: RTCDevice,
        error: RTCErrorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
pub type RTCMemoryMonitorFunction = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, bytes: isize, post: bool) -> bool,
>;
extern "C" {
    pub fn rtcSetDeviceMemoryMonitorFunction(
        device: RTCDevice,
        memoryMonitor: RTCMemoryMonitorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
pub const RTC_BUFFER_TYPE_INDEX: RTCBufferType = 0;
pub const RTC_BUFFER_TYPE_VERTEX: RTCBufferType = 1;
pub const RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE: RTCBufferType = 2;
pub const RTC_BUFFER_TYPE_NORMAL: RTCBufferType = 3;
pub const RTC_BUFFER_TYPE_TANGENT: RTCBufferType = 4;
pub const RTC_BUFFER_TYPE_NORMAL_DERIVATIVE: RTCBufferType = 5;
pub const RTC_BUFFER_TYPE_GRID: RTCBufferType = 8;
pub const RTC_BUFFER_TYPE_FACE: RTCBufferType = 16;
pub const RTC_BUFFER_TYPE_LEVEL: RTCBufferType = 17;
pub const RTC_BUFFER_TYPE_EDGE_CREASE_INDEX: RTCBufferType = 18;
pub const RTC_BUFFER_TYPE_EDGE_CREASE_WEIGHT: RTCBufferType = 19;
pub const RTC_BUFFER_TYPE_VERTEX_CREASE_INDEX: RTCBufferType = 20;
pub const RTC_BUFFER_TYPE_VERTEX_CREASE_WEIGHT: RTCBufferType = 21;
pub const RTC_BUFFER_TYPE_HOLE: RTCBufferType = 22;
pub const RTC_BUFFER_TYPE_FLAGS: RTCBufferType = 32;
pub type RTCBufferType = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBufferTy {
    _unused: [u8; 0],
}
pub type RTCBuffer = *mut RTCBufferTy;
extern "C" {
    pub fn rtcNewBuffer(device: RTCDevice, byteSize: usize) -> RTCBuffer;
}
extern "C" {
    pub fn rtcNewSharedBuffer(
        device: RTCDevice,
        ptr: *mut ::std::os::raw::c_void,
        byteSize: usize,
    ) -> RTCBuffer;
}
extern "C" {
    pub fn rtcGetBufferData(buffer: RTCBuffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcRetainBuffer(buffer: RTCBuffer);
}
extern "C" {
    pub fn rtcReleaseBuffer(buffer: RTCBuffer);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay {
    pub org_x: f32,
    pub org_y: f32,
    pub org_z: f32,
    pub tnear: f32,
    pub dir_x: f32,
    pub dir_y: f32,
    pub dir_z: f32,
    pub time: f32,
    pub tfar: f32,
    pub mask: ::std::os::raw::c_uint,
    pub id: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit {
    pub Ng_x: f32,
    pub Ng_y: f32,
    pub Ng_z: f32,
    pub u: f32,
    pub v: f32,
    pub primID: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
    pub instID: [::std::os::raw::c_uint; 1usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit {
    pub ray: RTCRay,
    pub hit: RTCHit,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay4 {
    pub org_x: [f32; 4usize],
    pub org_y: [f32; 4usize],
    pub org_z: [f32; 4usize],
    pub tnear: [f32; 4usize],
    pub dir_x: [f32; 4usize],
    pub dir_y: [f32; 4usize],
    pub dir_z: [f32; 4usize],
    pub time: [f32; 4usize],
    pub tfar: [f32; 4usize],
    pub mask: [::std::os::raw::c_uint; 4usize],
    pub id: [::std::os::raw::c_uint; 4usize],
    pub flags: [::std::os::raw::c_uint; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit4 {
    pub Ng_x: [f32; 4usize],
    pub Ng_y: [f32; 4usize],
    pub Ng_z: [f32; 4usize],
    pub u: [f32; 4usize],
    pub v: [f32; 4usize],
    pub primID: [::std::os::raw::c_uint; 4usize],
    pub geomID: [::std::os::raw::c_uint; 4usize],
    pub instID: [[::std::os::raw::c_uint; 4usize]; 1usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit4 {
    pub ray: RTCRay4,
    pub hit: RTCHit4,
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay8 {
    pub org_x: [f32; 8usize],
    pub org_y: [f32; 8usize],
    pub org_z: [f32; 8usize],
    pub tnear: [f32; 8usize],
    pub dir_x: [f32; 8usize],
    pub dir_y: [f32; 8usize],
    pub dir_z: [f32; 8usize],
    pub time: [f32; 8usize],
    pub tfar: [f32; 8usize],
    pub mask: [::std::os::raw::c_uint; 8usize],
    pub id: [::std::os::raw::c_uint; 8usize],
    pub flags: [::std::os::raw::c_uint; 8usize],
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit8 {
    pub Ng_x: [f32; 8usize],
    pub Ng_y: [f32; 8usize],
    pub Ng_z: [f32; 8usize],
    pub u: [f32; 8usize],
    pub v: [f32; 8usize],
    pub primID: [::std::os::raw::c_uint; 8usize],
    pub geomID: [::std::os::raw::c_uint; 8usize],
    pub instID: [[::std::os::raw::c_uint; 8usize]; 1usize],
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit8 {
    pub ray: RTCRay8,
    pub hit: RTCHit8,
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct RTCRay16 {
    pub org_x: [f32; 16usize],
    pub org_y: [f32; 16usize],
    pub org_z: [f32; 16usize],
    pub tnear: [f32; 16usize],
    pub dir_x: [f32; 16usize],
    pub dir_y: [f32; 16usize],
    pub dir_z: [f32; 16usize],
    pub time: [f32; 16usize],
    pub tfar: [f32; 16usize],
    pub mask: [::std::os::raw::c_uint; 16usize],
    pub id: [::std::os::raw::c_uint; 16usize],
    pub flags: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct RTCHit16 {
    pub Ng_x: [f32; 16usize],
    pub Ng_y: [f32; 16usize],
    pub Ng_z: [f32; 16usize],
    pub u: [f32; 16usize],
    pub v: [f32; 16usize],
    pub primID: [::std::os::raw::c_uint; 16usize],
    pub geomID: [::std::os::raw::c_uint; 16usize],
    pub instID: [[::std::os::raw::c_uint; 16usize]; 1usize],
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct RTCRayHit16 {
    pub ray: RTCRay16,
    pub hit: RTCHit16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayNp {
    pub org_x: *mut f32,
    pub org_y: *mut f32,
    pub org_z: *mut f32,
    pub tnear: *mut f32,
    pub dir_x: *mut f32,
    pub dir_y: *mut f32,
    pub dir_z: *mut f32,
    pub time: *mut f32,
    pub tfar: *mut f32,
    pub mask: *mut ::std::os::raw::c_uint,
    pub id: *mut ::std::os::raw::c_uint,
    pub flags: *mut ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCHitNp {
    pub Ng_x: *mut f32,
    pub Ng_y: *mut f32,
    pub Ng_z: *mut f32,
    pub u: *mut f32,
    pub v: *mut f32,
    pub primID: *mut ::std::os::raw::c_uint,
    pub geomID: *mut ::std::os::raw::c_uint,
    pub instID: [*mut ::std::os::raw::c_uint; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHitNp {
    pub ray: RTCRayNp,
    pub hit: RTCHitNp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayN {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCHitN {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHitN {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCQuaternionDecomposition {
    pub scale_x: f32,
    pub scale_y: f32,
    pub scale_z: f32,
    pub skew_xy: f32,
    pub skew_xz: f32,
    pub skew_yz: f32,
    pub shift_x: f32,
    pub shift_y: f32,
    pub shift_z: f32,
    pub quaternion_r: f32,
    pub quaternion_i: f32,
    pub quaternion_j: f32,
    pub quaternion_k: f32,
    pub translation_x: f32,
    pub translation_y: f32,
    pub translation_z: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCSceneTy {
    _unused: [u8; 0],
}
pub type RTCScene = *mut RTCSceneTy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCGeometryTy {
    _unused: [u8; 0],
}
pub type RTCGeometry = *mut RTCGeometryTy;
pub const RTC_GEOMETRY_TYPE_TRIANGLE: RTCGeometryType = 0;
pub const RTC_GEOMETRY_TYPE_QUAD: RTCGeometryType = 1;
pub const RTC_GEOMETRY_TYPE_GRID: RTCGeometryType = 2;
pub const RTC_GEOMETRY_TYPE_SUBDIVISION: RTCGeometryType = 8;
pub const RTC_GEOMETRY_TYPE_CONE_LINEAR_CURVE: RTCGeometryType = 15;
pub const RTC_GEOMETRY_TYPE_ROUND_LINEAR_CURVE: RTCGeometryType = 16;
pub const RTC_GEOMETRY_TYPE_FLAT_LINEAR_CURVE: RTCGeometryType = 17;
pub const RTC_GEOMETRY_TYPE_ROUND_BEZIER_CURVE: RTCGeometryType = 24;
pub const RTC_GEOMETRY_TYPE_FLAT_BEZIER_CURVE: RTCGeometryType = 25;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BEZIER_CURVE: RTCGeometryType = 26;
pub const RTC_GEOMETRY_TYPE_ROUND_BSPLINE_CURVE: RTCGeometryType = 32;
pub const RTC_GEOMETRY_TYPE_FLAT_BSPLINE_CURVE: RTCGeometryType = 33;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BSPLINE_CURVE: RTCGeometryType = 34;
pub const RTC_GEOMETRY_TYPE_ROUND_HERMITE_CURVE: RTCGeometryType = 40;
pub const RTC_GEOMETRY_TYPE_FLAT_HERMITE_CURVE: RTCGeometryType = 41;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_HERMITE_CURVE: RTCGeometryType = 42;
pub const RTC_GEOMETRY_TYPE_SPHERE_POINT: RTCGeometryType = 50;
pub const RTC_GEOMETRY_TYPE_DISC_POINT: RTCGeometryType = 51;
pub const RTC_GEOMETRY_TYPE_ORIENTED_DISC_POINT: RTCGeometryType = 52;
pub const RTC_GEOMETRY_TYPE_ROUND_CATMULL_ROM_CURVE: RTCGeometryType = 58;
pub const RTC_GEOMETRY_TYPE_FLAT_CATMULL_ROM_CURVE: RTCGeometryType = 59;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_CATMULL_ROM_CURVE: RTCGeometryType = 60;
pub const RTC_GEOMETRY_TYPE_USER: RTCGeometryType = 120;
pub const RTC_GEOMETRY_TYPE_INSTANCE: RTCGeometryType = 121;
pub type RTCGeometryType = i32;
pub const RTC_SUBDIVISION_MODE_NO_BOUNDARY: RTCSubdivisionMode = 0;
pub const RTC_SUBDIVISION_MODE_SMOOTH_BOUNDARY: RTCSubdivisionMode = 1;
pub const RTC_SUBDIVISION_MODE_PIN_CORNERS: RTCSubdivisionMode = 2;
pub const RTC_SUBDIVISION_MODE_PIN_BOUNDARY: RTCSubdivisionMode = 3;
pub const RTC_SUBDIVISION_MODE_PIN_ALL: RTCSubdivisionMode = 4;
pub type RTCSubdivisionMode = i32;
pub const RTC_CURVE_FLAG_NEIGHBOR_LEFT: RTCCurveFlags = 1;
pub const RTC_CURVE_FLAG_NEIGHBOR_RIGHT: RTCCurveFlags = 2;
pub type RTCCurveFlags = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBoundsFunctionArguments {
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub timeStep: ::std::os::raw::c_uint,
    pub bounds_o: *mut RTCBounds,
}
pub type RTCBoundsFunction =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCBoundsFunctionArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCIntersectFunctionNArguments {
    pub valid: *mut ::std::os::raw::c_int,
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub context: *mut RTCIntersectContext,
    pub rayhit: *mut RTCRayHitN,
    pub N: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
}
pub type RTCIntersectFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCIntersectFunctionNArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCOccludedFunctionNArguments {
    pub valid: *mut ::std::os::raw::c_int,
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub context: *mut RTCIntersectContext,
    pub ray: *mut RTCRayN,
    pub N: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
}
pub type RTCOccludedFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCOccludedFunctionNArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCDisplacementFunctionNArguments {
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub geometry: RTCGeometry,
    pub primID: ::std::os::raw::c_uint,
    pub timeStep: ::std::os::raw::c_uint,
    pub u: *const f32,
    pub v: *const f32,
    pub Ng_x: *const f32,
    pub Ng_y: *const f32,
    pub Ng_z: *const f32,
    pub P_x: *mut f32,
    pub P_y: *mut f32,
    pub P_z: *mut f32,
    pub N: ::std::os::raw::c_uint,
}
pub type RTCDisplacementFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCDisplacementFunctionNArguments)>;
extern "C" {
    pub fn rtcNewGeometry(device: RTCDevice, type_: RTCGeometryType) -> RTCGeometry;
}
extern "C" {
    pub fn rtcRetainGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcReleaseGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcCommitGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcEnableGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcDisableGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcSetGeometryTimeStepCount(
        geometry: RTCGeometry,
        timeStepCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryTimeRange(geometry: RTCGeometry, startTime: f32, endTime: f32);
}
extern "C" {
    pub fn rtcSetGeometryVertexAttributeCount(
        geometry: RTCGeometry,
        vertexAttributeCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryMask(geometry: RTCGeometry, mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rtcSetGeometryBuildQuality(geometry: RTCGeometry, quality: RTCBuildQuality);
}
extern "C" {
    pub fn rtcSetGeometryMaxRadiusScale(geometry: RTCGeometry, maxRadiusScale: f32);
}
extern "C" {
    pub fn rtcSetGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
        format: RTCFormat,
        buffer: RTCBuffer,
        byteOffset: usize,
        byteStride: usize,
        itemCount: usize,
    );
}
extern "C" {
    pub fn rtcSetSharedGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
        format: RTCFormat,
        ptr: *const ::std::os::raw::c_void,
        byteOffset: usize,
        byteStride: usize,
        itemCount: usize,
    );
}
extern "C" {
    pub fn rtcSetNewGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
        format: RTCFormat,
        byteStride: usize,
        itemCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcGetGeometryBufferData(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcUpdateGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryIntersectFilterFunction(geometry: RTCGeometry, filter: RTCFilterFunctionN);
}
extern "C" {
    pub fn rtcSetGeometryOccludedFilterFunction(geometry: RTCGeometry, filter: RTCFilterFunctionN);
}
extern "C" {
    pub fn rtcSetGeometryUserData(geometry: RTCGeometry, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rtcGetGeometryUserData(geometry: RTCGeometry) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcSetGeometryPointQueryFunction(
        geometry: RTCGeometry,
        pointQuery: RTCPointQueryFunction,
    );
}
extern "C" {
    pub fn rtcSetGeometryUserPrimitiveCount(
        geometry: RTCGeometry,
        userPrimitiveCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryBoundsFunction(
        geometry: RTCGeometry,
        bounds: RTCBoundsFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetGeometryIntersectFunction(geometry: RTCGeometry, intersect: RTCIntersectFunctionN);
}
extern "C" {
    pub fn rtcSetGeometryOccludedFunction(geometry: RTCGeometry, occluded: RTCOccludedFunctionN);
}
extern "C" {
    pub fn rtcFilterIntersection(
        args: *const RTCIntersectFunctionNArguments,
        filterArgs: *const RTCFilterFunctionNArguments,
    );
}
extern "C" {
    pub fn rtcFilterOcclusion(
        args: *const RTCOccludedFunctionNArguments,
        filterArgs: *const RTCFilterFunctionNArguments,
    );
}
extern "C" {
    pub fn rtcSetGeometryInstancedScene(geometry: RTCGeometry, scene: RTCScene);
}
extern "C" {
    pub fn rtcSetGeometryTransform(
        geometry: RTCGeometry,
        timeStep: ::std::os::raw::c_uint,
        format: RTCFormat,
        xfm: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetGeometryTransformQuaternion(
        geometry: RTCGeometry,
        timeStep: ::std::os::raw::c_uint,
        qd: *const RTCQuaternionDecomposition,
    );
}
extern "C" {
    pub fn rtcGetGeometryTransform(
        geometry: RTCGeometry,
        time: f32,
        format: RTCFormat,
        xfm: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetGeometryTessellationRate(geometry: RTCGeometry, tessellationRate: f32);
}
extern "C" {
    pub fn rtcSetGeometryTopologyCount(
        geometry: RTCGeometry,
        topologyCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometrySubdivisionMode(
        geometry: RTCGeometry,
        topologyID: ::std::os::raw::c_uint,
        mode: RTCSubdivisionMode,
    );
}
extern "C" {
    pub fn rtcSetGeometryVertexAttributeTopology(
        geometry: RTCGeometry,
        vertexAttributeID: ::std::os::raw::c_uint,
        topologyID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryDisplacementFunction(
        geometry: RTCGeometry,
        displacement: RTCDisplacementFunctionN,
    );
}
extern "C" {
    pub fn rtcGetGeometryFirstHalfEdge(
        geometry: RTCGeometry,
        faceID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryFace(
        geometry: RTCGeometry,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryNextHalfEdge(
        geometry: RTCGeometry,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryPreviousHalfEdge(
        geometry: RTCGeometry,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryOppositeHalfEdge(
        geometry: RTCGeometry,
        topologyID: ::std::os::raw::c_uint,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCInterpolateArguments {
    pub geometry: RTCGeometry,
    pub primID: ::std::os::raw::c_uint,
    pub u: f32,
    pub v: f32,
    pub bufferType: RTCBufferType,
    pub bufferSlot: ::std::os::raw::c_uint,
    pub P: *mut f32,
    pub dPdu: *mut f32,
    pub dPdv: *mut f32,
    pub ddPdudu: *mut f32,
    pub ddPdvdv: *mut f32,
    pub ddPdudv: *mut f32,
    pub valueCount: ::std::os::raw::c_uint,
}
extern "C" {
    pub fn rtcInterpolate(args: *const RTCInterpolateArguments);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCInterpolateNArguments {
    pub geometry: RTCGeometry,
    pub valid: *const ::std::os::raw::c_void,
    pub primIDs: *const ::std::os::raw::c_uint,
    pub u: *const f32,
    pub v: *const f32,
    pub N: ::std::os::raw::c_uint,
    pub bufferType: RTCBufferType,
    pub bufferSlot: ::std::os::raw::c_uint,
    pub P: *mut f32,
    pub dPdu: *mut f32,
    pub dPdv: *mut f32,
    pub ddPdudu: *mut f32,
    pub ddPdvdv: *mut f32,
    pub ddPdudv: *mut f32,
    pub valueCount: ::std::os::raw::c_uint,
}
extern "C" {
    pub fn rtcInterpolateN(args: *const RTCInterpolateNArguments);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCGrid {
    pub startVertexID: ::std::os::raw::c_uint,
    pub stride: ::std::os::raw::c_uint,
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
}
pub const RTC_SCENE_FLAG_NONE: RTCSceneFlags = 0;
pub const RTC_SCENE_FLAG_DYNAMIC: RTCSceneFlags = 1;
pub const RTC_SCENE_FLAG_COMPACT: RTCSceneFlags = 2;
pub const RTC_SCENE_FLAG_ROBUST: RTCSceneFlags = 4;
pub const RTC_SCENE_FLAG_CONTEXT_FILTER_FUNCTION: RTCSceneFlags = 8;
pub type RTCSceneFlags = i32;
extern "C" {
    pub fn rtcNewScene(device: RTCDevice) -> RTCScene;
}
extern "C" {
    pub fn rtcGetSceneDevice(hscene: RTCScene) -> RTCDevice;
}
extern "C" {
    pub fn rtcRetainScene(scene: RTCScene);
}
extern "C" {
    pub fn rtcReleaseScene(scene: RTCScene);
}
extern "C" {
    pub fn rtcAttachGeometry(scene: RTCScene, geometry: RTCGeometry) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcAttachGeometryByID(
        scene: RTCScene,
        geometry: RTCGeometry,
        geomID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcDetachGeometry(scene: RTCScene, geomID: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rtcGetGeometry(scene: RTCScene, geomID: ::std::os::raw::c_uint) -> RTCGeometry;
}
extern "C" {
    pub fn rtcCommitScene(scene: RTCScene);
}
extern "C" {
    pub fn rtcJoinCommitScene(scene: RTCScene);
}
pub type RTCProgressMonitorFunction =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, n: f64) -> bool>;
extern "C" {
    pub fn rtcSetSceneProgressMonitorFunction(
        scene: RTCScene,
        progress: RTCProgressMonitorFunction,
        ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetSceneBuildQuality(scene: RTCScene, quality: RTCBuildQuality);
}
extern "C" {
    pub fn rtcSetSceneFlags(scene: RTCScene, flags: RTCSceneFlags);
}
extern "C" {
    pub fn rtcGetSceneFlags(scene: RTCScene) -> RTCSceneFlags;
}
extern "C" {
    pub fn rtcGetSceneBounds(scene: RTCScene, bounds_o: *mut RTCBounds);
}
extern "C" {
    pub fn rtcGetSceneLinearBounds(scene: RTCScene, bounds_o: *mut RTCLinearBounds);
}
extern "C" {
    pub fn rtcPointQuery(
        scene: RTCScene,
        query: *mut RTCPointQuery,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcPointQuery4(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        query: *mut RTCPointQuery4,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcPointQuery8(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        query: *mut RTCPointQuery8,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcPointQuery16(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        query: *mut RTCPointQuery16,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcIntersect1(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit,
    );
}
extern "C" {
    pub fn rtcIntersect4(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit4,
    );
}
extern "C" {
    pub fn rtcIntersect8(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit8,
    );
}
extern "C" {
    pub fn rtcIntersect16(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit16,
    );
}
extern "C" {
    pub fn rtcIntersect1M(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit,
        M: ::std::os::raw::c_uint,
        byteStride: usize,
    );
}
extern "C" {
    pub fn rtcIntersect1Mp(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut *mut RTCRayHit,
        M: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcIntersectNM(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHitN,
        N: ::std::os::raw::c_uint,
        M: ::std::os::raw::c_uint,
        byteStride: usize,
    );
}
extern "C" {
    pub fn rtcIntersectNp(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *const RTCRayHitNp,
        N: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcOccluded1(scene: RTCScene, context: *mut RTCIntersectContext, ray: *mut RTCRay);
}
extern "C" {
    pub fn rtcOccluded4(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRay4,
    );
}
extern "C" {
    pub fn rtcOccluded8(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRay8,
    );
}
extern "C" {
    pub fn rtcOccluded16(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRay16,
    );
}
extern "C" {
    pub fn rtcOccluded1M(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRay,
        M: ::std::os::raw::c_uint,
        byteStride: usize,
    );
}
extern "C" {
    pub fn rtcOccluded1Mp(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut *mut RTCRay,
        M: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcOccludedNM(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRayN,
        N: ::std::os::raw::c_uint,
        M: ::std::os::raw::c_uint,
        byteStride: usize,
    );
}
extern "C" {
    pub fn rtcOccludedNp(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *const RTCRayNp,
        N: ::std::os::raw::c_uint,
    );
}
#[doc = " collision callback"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCCollision {
    pub geomID0: ::std::os::raw::c_uint,
    pub primID0: ::std::os::raw::c_uint,
    pub geomID1: ::std::os::raw::c_uint,
    pub primID1: ::std::os::raw::c_uint,
}
pub type RTCCollideFunc = ::std::option::Option<
    unsafe extern "C" fn(
        userPtr: *mut ::std::os::raw::c_void,
        collisions: *mut RTCCollision,
        num_collisions: ::std::os::raw::c_uint,
    ),
>;
extern "C" {
    #[doc = " Performs collision detection of two scenes"]
    pub fn rtcCollide(
        scene0: RTCScene,
        scene1: RTCScene,
        callback: RTCCollideFunc,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBVHTy {
    _unused: [u8; 0],
}
pub type RTCBVH = *mut RTCBVHTy;
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCBuildPrimitive {
    pub lower_x: f32,
    pub lower_y: f32,
    pub lower_z: f32,
    pub geomID: ::std::os::raw::c_uint,
    pub upper_x: f32,
    pub upper_y: f32,
    pub upper_z: f32,
    pub primID: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCThreadLocalAllocatorTy {
    _unused: [u8; 0],
}
pub type RTCThreadLocalAllocator = *mut RTCThreadLocalAllocatorTy;
pub type RTCCreateNodeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: RTCThreadLocalAllocator,
        childCount: ::std::os::raw::c_uint,
        userPtr: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RTCSetNodeChildrenFunction = ::std::option::Option<
    unsafe extern "C" fn(
        nodePtr: *mut ::std::os::raw::c_void,
        children: *mut *mut ::std::os::raw::c_void,
        childCount: ::std::os::raw::c_uint,
        userPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub type RTCSetNodeBoundsFunction = ::std::option::Option<
    unsafe extern "C" fn(
        nodePtr: *mut ::std::os::raw::c_void,
        bounds: *mut *const RTCBounds,
        childCount: ::std::os::raw::c_uint,
        userPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub type RTCCreateLeafFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: RTCThreadLocalAllocator,
        primitives: *const RTCBuildPrimitive,
        primitiveCount: usize,
        userPtr: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RTCSplitPrimitiveFunction = ::std::option::Option<
    unsafe extern "C" fn(
        primitive: *const RTCBuildPrimitive,
        dimension: ::std::os::raw::c_uint,
        position: f32,
        leftBounds: *mut RTCBounds,
        rightBounds: *mut RTCBounds,
        userPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub const RTC_BUILD_FLAG_NONE: RTCBuildFlags = 0;
pub const RTC_BUILD_FLAG_DYNAMIC: RTCBuildFlags = 1;
pub type RTCBuildFlags = i32;
pub const RTC_BUILD_MAX_PRIMITIVES_PER_LEAF: RTCBuildConstants = 32;
pub type RTCBuildConstants = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBuildArguments {
    pub byteSize: usize,
    pub buildQuality: RTCBuildQuality,
    pub buildFlags: RTCBuildFlags,
    pub maxBranchingFactor: ::std::os::raw::c_uint,
    pub maxDepth: ::std::os::raw::c_uint,
    pub sahBlockSize: ::std::os::raw::c_uint,
    pub minLeafSize: ::std::os::raw::c_uint,
    pub maxLeafSize: ::std::os::raw::c_uint,
    pub traversalCost: f32,
    pub intersectionCost: f32,
    pub bvh: RTCBVH,
    pub primitives: *mut RTCBuildPrimitive,
    pub primitiveCount: usize,
    pub primitiveArrayCapacity: usize,
    pub createNode: RTCCreateNodeFunction,
    pub setNodeChildren: RTCSetNodeChildrenFunction,
    pub setNodeBounds: RTCSetNodeBoundsFunction,
    pub createLeaf: RTCCreateLeafFunction,
    pub splitPrimitive: RTCSplitPrimitiveFunction,
    pub buildProgress: RTCProgressMonitorFunction,
    pub userPtr: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn rtcNewBVH(device: RTCDevice) -> RTCBVH;
}
extern "C" {
    pub fn rtcBuildBVH(args: *const RTCBuildArguments) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcThreadLocalAlloc(
        allocator: RTCThreadLocalAllocator,
        bytes: usize,
        align: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcRetainBVH(bvh: RTCBVH);
}
extern "C" {
    pub fn rtcReleaseBVH(bvh: RTCBVH);
}
